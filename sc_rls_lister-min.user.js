(() => { "use strict"; const e = e => document.createElement(e), t = (e, t) => e.appendChild(t.cloneNode(!0)), a = e("table"); a.classList.add("hidden", "table", "table--panel-like", "table--bordered", "table--striped"), a.setAttribute("id", "scene-releases-table"); const r = document.querySelector("#torrent-table"), s = document.querySelector("#requests"), l = document.querySelector("#encode-offers-table"), n = document.querySelector("#torrent-table thead tr th:nth-child(1) strong"), c = document.querySelector("#requests thead tr th:nth-child(1) strong"), o = document.querySelector("#encode-offers-table thead tr th:nth-child(1) strong"), i = e("a"); i.classList.add("go-to-scene-releases"), i.textContent = " | Scene Releases", i.setAttribute("href", "#"), t(n, i), c && t(c, i), o && t(o, i); const d = document.querySelector("#torrent-table thead tr th strong").innerHTML.replace("Torrents", "<a>Torrents</a>"); a.innerHTML = `\n    <table cellpadding="6" cellspacing="1" border="0" class="table table--panel-like table--bordered" id="requests">\n        <thead>\n            <tr>\n                <th style="width: 48%;">\n                    <strong>\n                        ${d}\n                    </strong>\n                </th>\n                <th class="th-added">Added</th>\n            </tr>\n        </thead>\n        <tbody id="scene-releases-body">\n        </tbody>\n    </table>`, r.parentNode.insertBefore(a, r.nextSibling), document.querySelectorAll("\n        #torrent-table,\n        #requests,\n        #encode-offers-table,\n        #scene-releases-table\n    ").forEach(e => { e.querySelectorAll("thead tr th strong a").forEach(t => { t.setAttribute("href", "#"), t.setAttribute("onclick", "return false"), t.addEventListener("click", () => { t.textContent.includes("Torrents") ? (e.classList.add("hidden"), r.classList.remove("hidden")) : t.textContent.includes("Requests") ? (e.classList.add("hidden"), s.classList.remove("hidden")) : t.textContent.includes("Encoding") ? (e.classList.add("hidden"), l.classList.remove("hidden")) : t.textContent.includes("Scene Releases") && (e.classList.add("hidden"), a.classList.remove("hidden")) }) }) }); const h = document.querySelector("#imdb-title-link"), u = document.querySelector(".page__title"), m = new RegExp(/:|\[|-|'|"|,/gi), g = u.textContent.split("]")[0].replaceAll(m, "").trim(), p = `https://www.srrdb.com/api/search/${g.replaceAll(" ", "/")}/category:x264/foreign:no/`, b = document.querySelector(".basic-movie-list__torrent-edition__main"), y = /BDRip|WEB|WEBRip|HDTV|PDTV|DVDR|DVD9|NTSC|DVDRip|Screener|TELESYNC|R5|DSR|Cam/gi, f = /720|1080|Bluray|\b(BDR)\b/gi, S = /2160p|UHD/gi, v = /3D/gi, w = /Extras|Bonus|Subpack|SUBFiX/gi, E = [], D = [], C = [], L = [], A = [], q = [], x = document.querySelector("#scene-releases-body"), R = (a, r) => { const s = e("tr"), l = e("td"), n = e("span"), c = e("span"); s.classList.add("group_torrent"), s.setAttribute("id", a), l.classList.add("basic-movie-list__torrent-edition__main"), l.setAttribute("colspan", "5;"), l.setAttribute("style", "background-color: #3a4055; width: 100%;"), c.setAttribute("style", "font-weight: 400;"), n.textContent = b.textContent, c.textContent = r, t(l, n), t(l, c), t(s, l), t(x, s) }, B = [["group-parent-sd", " - Standard Definition"], ["group-parent-hd", " - High Definition"], ["group-parent-uhd", " - Ultra High Definition"], ["group-parent-3d", " - 3D"], ["group-parent-other", " - Other"]]; for (const e of B) R(...e); const T = document.querySelector("#group-parent-sd"), _ = document.querySelector("#group-parent-hd"), V = document.querySelector("#group-parent-uhd"), k = document.querySelector("#group-parent-3d"), N = document.querySelector("#group-parent-other"); document.querySelectorAll("#group-parent-sd, #group-parent-hd, #group-parent-uhd, #group-parent-3d, #group-parent-other").forEach(e => { e.style.display = "none" }); const H = () => { document.querySelector(".th-added").remove(); const a = e("tr"), r = e("td"), s = e("a"); r.textContent = `No releases found, to search manually ${s}`, r.setAttribute("style", "width: 100%;"); const l = u.textContent.split("[")[0].replaceAll(m, "").trim().replaceAll(" ", "/"); s.setAttribute("href", `https://www.srrdb.com/browse/${l}/1`), s.setAttribute("target", "_blank;"), s.textContent = "click here.", t(r, s), t(a, r), t(x, a) }, W = a => { console.log("⚠️", a); const r = e("tr"), s = e("td"); s.textContent = "⚠️" + a, s.setAttribute("style", "width: 100%; color: red; font-weight: bold;"), t(r, s), t(x, r) }, $ = document.getElementsByClassName("exact-match"), M = a => { (e => (e.forEach(e => { !e.release.match(y) || e.release.match(f) || e.release.match(S) || e.release.match(v) || e.release.match(w) ? !e.release.match(f) || e.release.match(S) || e.release.match(v) || e.release.match(w) ? e.release.match(S) ? (e.release.match(/WEB/gi) ? e.value = "2" : e.release.match(/BluRay/gi) && !e.release.match(/COMPLETE/gi) ? e.value = "1" : e.release.match(/COMPLETE/gi) && (e.value = "0"), C.push(e), q.push(e)) : e.release.match(v) ? (e.release.match(/1080p/gi) || e.release.match(/2160p/gi) ? e.value = "1" : e.release.match(/COMPLETE/gi) && (e.value = "0"), L.push(e), q.push(e)) : (!e.release.match(w) || e.release.match(f) || e.release.match(S), e.value = "0", A.push(e), q.push(e)) : (e.release.match(/HDTV/gi) && e.release.match(/720p/gi) ? e.value = "6" : e.release.match(/WEB/gi) && e.release.match(/720p/gi) ? e.value = "5" : e.release.match(/BluRay/gi) && e.release.match(/720p/gi) ? e.value = "4" : e.release.match(/HDTV/gi) && e.release.match(/1080p/gi) ? e.value = "3" : e.release.match(/WEB/gi) && e.release.match(/1080p/gi) ? e.value = "2" : e.release.match(/BluRay/gi) && e.release.match(/1080p/gi) ? e.value = "1" : (e.release.match(/COMPLETE/gi) || e.release.match(/BD9/gi) || e.release.match(/\b(BDR)\b/gi)) && (e.value = "0"), D.push(e), q.push(e)) : (e.release.match(/Cam/gi) ? e.value = "12" : e.release.match(/TELESYNC/gi) ? e.value = "11" : e.release.match(/Screener/gi) ? e.value = "10" : e.release.match(/R5/gi) && !e.release.match(/DVDR/gi) ? e.value = "9" : e.release.match(/DSR/gi) ? e.value = "8" : e.release.match(/DVDRip/gi) ? e.value = "7" : e.release.match(/PDTV/gi) ? e.value = "6" : e.release.match(/HDTV/gi) ? e.value = "5" : e.release.match(/WEBRip/gi) ? e.value = "4" : e.release.match(/BDRip/gi) ? e.value = "3" : e.release.match(/WEB/gi) ? e.value = "2" : e.release.match(/DVDR/gi) || e.release.match(/NTSC/gi) ? e.value = "1" : e.release.match(/DVD9/gi) && (e.value = "0"), E.push(e), q.push(e)) }), q.sort((e, t) => e.value > t.value ? 1 : -1)))(a), (() => { const a = g.replaceAll(" ", "."); q.forEach(r => { const s = e("tr"), l = e("td"), n = e("td"), c = e("a"); c.textContent = `${r.release}`, !r.release.match(y) || r.release.match(f) || r.release.match(S) || r.release.match(v) || r.release.match(w) ? !r.release.match(f) || r.release.match(S) || r.release.match(v) || r.release.match(w) ? r.release.match(S) ? c.classList.add("rls-uhd") : r.release.match(v) ? c.classList.add("rls-3d") : (!r.release.match(w) || r.release.match(f) || r.release.match(S), c.classList.add("rls-other")) : c.classList.add("rls-hd") : c.classList.add("rls-sd"), c.textContent.match(a) && c.classList.add("exact-match"), n.textContent = `${r.date}`, l.setAttribute("style", "width: 80%;"), n.setAttribute("style", "width: 20%;"), c.setAttribute("href", `https://www.srrdb.com/release/details/${r.release}`), c.setAttribute("target", "_blank;"), t(l, c), t(s, l), t(s, n), t(x, s) }) })(), (() => { const e = (e, t) => { const a = document.querySelectorAll(e); a && (t.style.display = "table-row", a.forEach(e => { const a = e.parentElement.parentElement; t.parentNode && t.parentNode.insertBefore(a, t.nextSibling) }), [t].forEach(e => { null === e.nextSibling || e.nextSibling.classList.contains("group_torrent") ? e.remove() : e.style.display = "table-row" })) }, t = [[".rls-sd", T], [".rls-hd", _], [".rls-uhd", V], [".rls-3d", k], [".rls-other", N]]; for (const a of t) e(...a) })() }; !async function () { let e, t, a, r, s; try { if (h) if (e = `https://www.srrdb.com/api/search/imdb:${h.getAttribute("href").trim().split("/")[4]}/foreign:no/`, t = await fetch(e), a = await t.json(), r = await a.results, (s = await a.resultsCount) > 0) M(r); else if (t = await fetch(p), a = await t.json(), r = await a.results, (s = await a.resultsCount) > 0) { if (M(r), s > 5) for (let e = 0; e < $.length; e++) { const t = $[e]; t.style.fontWeight = "bold", t.style.color = "#418b00" } } else H(); else if (t = await fetch(p), a = await t.json(), r = await a.results, (s = await a.resultsCount) > 0) { if (M(r), s > 5) for (let e = 0; e < $.length; e++) { const t = $[e]; t.style.fontWeight = "bold", t.style.color = "#418b00" } } else H() } catch (e) { W(e) } }() })();
